const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const mime = require('mime-types');

// Global error handling
process.on('uncaughtException', (error) => {
  console.error('🔥 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('🔥 Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

console.log('🚀 Starting Card Tower Defense server...');

const GameRoom = require('./game/GameRoom');
const { GAME_EVENTS } = require('./constants/events');

const app = express();
const server = http.createServer(app);

// Debug middleware - log all requests (disable in production)
if (process.env.NODE_ENV !== 'production') {
  app.use((req, res, next) => {
    console.log(`${req.method} ${req.path} - ${req.get('User-Agent')?.substring(0, 50) || 'No User-Agent'}`);
    next();
  });
}

// Custom middleware to fix MIME types BEFORE static files
app.use((req, res, next) => {
  if (process.env.NODE_ENV !== 'production') {
    console.log(`📝 Request: ${req.method} ${req.path}`);
  }
  
  // Force correct MIME types for specific file extensions
  if (req.path.endsWith('.js')) {
    if (process.env.NODE_ENV !== 'production') {
      console.log('🔧 Forcing JS MIME type');
    }
    res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
  } else if (req.path.endsWith('.css')) {
    if (process.env.NODE_ENV !== 'production') {
      console.log('🔧 Forcing CSS MIME type');
    }
    res.setHeader('Content-Type', 'text/css; charset=utf-8');
  } else if (req.path.endsWith('.html')) {
    if (process.env.NODE_ENV !== 'production') {
      console.log('🔧 Forcing HTML MIME type');
    }
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
  }
  
  next();
});

// Global error handling
process.on('uncaughtException', (error) => {
  console.error('🔥 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('🔥 Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

console.log('🚀 Starting Card Tower Defense server...');

const GameRoom = require('./game/GameRoom');
const { GAME_EVENTS } = require('./constants/events');

const app = express();
const server = http.createServer(app);

// Debug middleware - log all requests (disable in production)
if (process.env.NODE_ENV !== 'production') {
  app.use((req, res, next) => {
    console.log(`${req.method} ${req.path} - ${req.get('User-Agent')?.substring(0, 50) || 'No User-Agent'}`);
    next();
  });
}

// Custom middleware to fix MIME types BEFORE static files
app.use((req, res, next) => {
  console.log(`� Request: ${req.method} ${req.path}`);
  
  // Force correct MIME types for specific file extensions
  if (req.path.endsWith('.js')) {
    console.log('🔧 Forcing JS MIME type');
    res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
  } else if (req.path.endsWith('.css')) {
    console.log('🔧 Forcing CSS MIME type');
    res.setHeader('Content-Type', 'text/css; charset=utf-8');
  } else if (req.path.endsWith('.html')) {
    console.log('🔧 Forcing HTML MIME type');
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
  }
  
  next();
});

// Serve static files from public directory
app.use(express.static(path.join(__dirname, '../public')));

// Specific routes for JavaScript files to force correct MIME type
app.get('/js/*.js', (req, res) => {
  const filePath = path.join(__dirname, '../public', req.path);
  console.log(`🔧 Serving JS file: ${filePath}`);
  res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
  res.sendFile(filePath);
});

// Specific routes for CSS files
app.get('*.css', (req, res) => {
  const filePath = path.join(__dirname, '../public', req.path);
  console.log(`🔧 Serving CSS file: ${filePath}`);
  res.setHeader('Content-Type', 'text/css; charset=utf-8');
  res.sendFile(filePath);
});

// Route for root path - serve index.html
app.get('/', (req, res) => {
  console.log('Serving index.html for root path');
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// Handle favicon.ico to avoid 404 errors
app.get('/favicon.ico', (req, res) => {
  res.status(204).end();
});

// Health check endpoint for Render
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

console.log('🔌 Initializing Socket.io...');

// Initialize Socket.io AFTER static files
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  },
  serveClient: false,
  path: '/socket.io'
});

console.log('✅ Socket.io initialized successfully');

// Game rooms storage
const gameRooms = new Map();

// Socket.io connection handling
io.on('connection', (socket) => {
  console.log('New client connected:', socket.id);

  // Join or create room
  socket.on(GAME_EVENTS.JOIN_ROOM, (data) => {
    const { roomId, playerName } = data;
    let room;

    if (roomId && gameRooms.has(roomId)) {
      room = gameRooms.get(roomId);
    } else {
      // Create new room
      const newRoomId = roomId || uuidv4();
      room = new GameRoom(newRoomId, io);
      gameRooms.set(newRoomId, room);
    }

    // Add player to room
    const success = room.addPlayer(socket.id, playerName || `Player ${socket.id.substring(0, 6)}`);
    
    if (success) {
      socket.join(room.id);
      socket.emit(GAME_EVENTS.ROOM_JOINED, {
        roomId: room.id,
        playerId: socket.id,
        gameState: room.getGameState()
      });
      
      // Notify all players in room about new player
      room.broadcastGameState();
    } else {
      socket.emit(GAME_EVENTS.ERROR, { message: 'Room is full or game in progress' });
    }
  });

  // Handle card selection
  socket.on(GAME_EVENTS.SELECT_CARD, (data) => {
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.handleCardSelection(socket.id, data.cardIndex);
    }
  });

  // Handle tower placement
  socket.on(GAME_EVENTS.PLACE_TOWER, (data) => {
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.handleTowerPlacement(socket.id, data);
    }
  });

  // Handle effect application
  socket.on(GAME_EVENTS.APPLY_EFFECT, (data) => {
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.handleEffectApplication(socket.id, data);
    }
  });

  // Handle tower inspection
  socket.on(GAME_EVENTS.INSPECT_TOWER, (data) => {
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.handleTowerInspection(socket.id, data);
    }
  });

  // Handle ready status
  socket.on(GAME_EVENTS.PLAYER_READY, () => {
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.setPlayerReady(socket.id);
    }
  });

  // Handle disconnection
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
    const room = findRoomByPlayerId(socket.id);
    if (room) {
      room.removePlayer(socket.id);
      if (room.getPlayerCount() === 0) {
        gameRooms.delete(room.id);
      }
    }
  });
});

// Helper function to find room by player ID
function findRoomByPlayerId(playerId) {
  for (const room of gameRooms.values()) {
    if (room.hasPlayer(playerId)) {
      return room;
    }
  }
  return null;
}

const PORT = process.env.PORT || 3000;
console.log(`🔧 Environment PORT: ${process.env.PORT || 'not set, using 3000'}`);
console.log(`🔧 Final PORT: ${PORT}`);

server.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Card Tower Defense server running on port ${PORT}`);
  console.log(`📡 Socket.io initialized with path: /socket.io`);
  console.log(`🌐 CORS enabled for all origins`);
  console.log(`📁 Serving static files from: ${path.join(__dirname, '../public')}`);
  console.log(`🔗 Server listening on 0.0.0.0:${PORT}`);
}).on('error', (err) => {
  console.error('❌ Server failed to start:', err);
  process.exit(1);
});
